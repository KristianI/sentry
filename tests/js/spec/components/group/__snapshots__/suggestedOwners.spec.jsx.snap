// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SuggestedOwners render() should not show owners committers without featureflag 1`] = `
<SuggestedOwners
  event={
    Object {
      "eventID": "12345678901234567890123456789012",
      "groupID": "1",
      "id": "1",
      "message": "ApiException",
    }
  }
>
  <div
    className="m-b-1"
  >
    <h6>
      <span>
        Suggested Assignees
      </span>
      <small
        style={
          Object {
            "background": "#FFFFFF",
          }
        }
      >
        Click to assign
      </small>
    </h6>
    <div
      className="avatar-grid"
    >
      <SuggestedOwnersHovercard
        actor={
          Object {
            "id": "1",
            "name": "Jane Doe",
            "type": "user",
          }
        }
        key="1:undefined:Jane Doe:0"
        rules={Array []}
      >
        <Hovercard
          body={
            <HovercardBody>
              <React.Fragment>
                <div
                  className="divider"
                >
                  <h6>
                    Ownership Rules
                  </h6>
                </div>
                <SuggestionReason>
                  Suggested based on Project Ownership settings
                </SuggestionReason>
                <ul />
              </React.Fragment>
            </HovercardBody>
          }
          containerClassName="avatar-grid-item"
          displayTimeout={100}
          header={
            <React.Fragment>
              <HovercardHeader>
                <HovercardActorAvatar
                  actor={
                    Object {
                      "id": "1",
                      "name": "Jane Doe",
                      "type": "user",
                    }
                  }
                />
                Jane Doe
              </HovercardHeader>
            </React.Fragment>
          }
          key="user:undefined"
        >
          <Container
            className="avatar-grid-item"
            innerRef={
              Object {
                "current": <span
                  class="avatar-grid-item css-s35yzd-Container e38w1je1"
                >
                  <span
                    class="avatar css-3f9bmx-StyledBaseAvatar e1z0ohzl0"
                    style="cursor: pointer;"
                  >
                    <svg
                      class="css-1r4mnb9-Svg e1knxa8x0"
                      viewBox="0 0 120 120"
                    >
                      <rect
                        fill="#f868bc"
                        height="120"
                        rx="15"
                        ry="15"
                        width="120"
                        x="0"
                        y="0"
                      />
                      <text
                        fill="#FFFFFF"
                        font-size="65"
                        style="dominant-baseline: central;"
                        text-anchor="middle"
                        x="50%"
                        y="50%"
                      >
                        JD
                      </text>
                    </svg>
                  </span>
                </span>,
              }
            }
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
          >
            <span
              className="avatar-grid-item css-s35yzd-Container e38w1je1"
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
            >
              <ActorAvatar
                actor={
                  Object {
                    "id": "1",
                    "name": "Jane Doe",
                    "type": "user",
                  }
                }
                hasTooltip={false}
                onClick={[Function]}
                style={
                  Object {
                    "cursor": "pointer",
                  }
                }
              >
                <Avatar
                  hasTooltip={false}
                  onClick={[Function]}
                  style={
                    Object {
                      "cursor": "pointer",
                    }
                  }
                  user={
                    Object {
                      "email": "janedoe@example.com",
                      "id": "1",
                      "name": "Jane Doe",
                    }
                  }
                >
                  <UserAvatar
                    gravatar={false}
                    hasTooltip={false}
                    onClick={[Function]}
                    style={
                      Object {
                        "cursor": "pointer",
                      }
                    }
                    user={
                      Object {
                        "email": "janedoe@example.com",
                        "id": "1",
                        "name": "Jane Doe",
                      }
                    }
                  >
                    <BaseAvatar
                      gravatarId="janedoe@example.com"
                      hasTooltip={false}
                      letterId="janedoe@example.com"
                      onClick={[Function]}
                      round={true}
                      style={
                        Object {
                          "cursor": "pointer",
                        }
                      }
                      title="Jane Doe"
                      tooltip="Jane Doe (janedoe@example.com)"
                      type="letter_avatar"
                      uploadPath="avatar"
                    >
                      <Tooltip
                        disabled={true}
                        title="Jane Doe (janedoe@example.com)"
                      >
                        <StyledBaseAvatar
                          className="avatar"
                          loaded={true}
                          round={true}
                          style={
                            Object {
                              "cursor": "pointer",
                            }
                          }
                        >
                          <span
                            className="avatar css-3f9bmx-StyledBaseAvatar e1z0ohzl0"
                            style={
                              Object {
                                "cursor": "pointer",
                              }
                            }
                          >
                            <LetterAvatar
                              displayName="Jane Doe"
                              identifier="janedoe@example.com"
                              round={true}
                            >
                              <Svg
                                round={true}
                                viewBox="0 0 120 120"
                              >
                                <svg
                                  className="css-1r4mnb9-Svg e1knxa8x0"
                                  viewBox="0 0 120 120"
                                >
                                  <rect
                                    fill="#f868bc"
                                    height="120"
                                    rx="15"
                                    ry="15"
                                    width="120"
                                    x="0"
                                    y="0"
                                  />
                                  <text
                                    fill="#FFFFFF"
                                    fontSize="65"
                                    style={
                                      Object {
                                        "dominantBaseline": "central",
                                      }
                                    }
                                    textAnchor="middle"
                                    x="50%"
                                    y="50%"
                                  >
                                    JD
                                  </text>
                                </svg>
                              </Svg>
                            </LetterAvatar>
                          </span>
                        </StyledBaseAvatar>
                      </Tooltip>
                    </BaseAvatar>
                  </UserAvatar>
                </Avatar>
              </ActorAvatar>
            </span>
          </Container>
        </Hovercard>
      </SuggestedOwnersHovercard>
    </div>
  </div>
  <AccessContainer
    access={
      Array [
        "project:write",
      ]
    }
  >
    <Access
      access={
        Array [
          "project:write",
        ]
      }
      configUser={
        Object {
          "email": "foo@example.com",
          "flags": Object {
            "newsletter_consent_prompt": false,
          },
          "hasPasswordAuth": true,
          "id": "1",
          "isAuthenticated": true,
          "name": "Foo Bar",
          "options": Object {
            "timezone": "UTC",
          },
          "permissions": Set {},
          "username": "foo@example.com",
        }
      }
      organization={
        Object {
          "access": Array [
            "org:read",
            "org:write",
            "org:admin",
            "project:read",
            "project:write",
            "project:admin",
            "team:read",
            "team:write",
            "team:admin",
          ],
          "features": Array [],
          "id": "3",
          "name": "Organization Name",
          "onboardingTasks": Array [],
          "projects": Array [],
          "scrapeJavaScript": true,
          "slug": "org-slug",
          "status": Object {
            "id": "active",
            "name": "active",
          },
          "teams": Array [],
        }
      }
      renderNoAccessMessage={false}
      requireAll={true}
    >
      <div
        className="m-b-1"
      >
        <h6>
          <GuideAnchor
            target="owners"
            type="text"
          >
            <GuideAnchorContainer
              innerRef={[Function]}
              type="text"
            >
              <div
                className="css-9u5for-GuideAnchorContainer e130o4350"
                type="text"
              >
                <StyledGuideAnchor
                  active={false}
                  className="guide-anchor-ping owners"
                >
                  <div
                    className="guide-anchor-ping owners css-1yndvnf-StyledGuideAnchor e130o4351"
                  >
                    <StyledGuideAnchorRipples>
                      <div
                        className="css-3zj3g7-StyledGuideAnchorRipples e130o4352"
                      />
                    </StyledGuideAnchorRipples>
                  </div>
                </StyledGuideAnchor>
              </div>
            </GuideAnchorContainer>
          </GuideAnchor>
          <span>
            Ownership Rules
          </span>
        </h6>
        <Button
          className="btn btn-default btn-sm btn-create-ownership-rule"
          disabled={false}
          onClick={[Function]}
          size="small"
        >
          <StyledButton
            aria-label="Create Ownership Rule"
            className="btn btn-default btn-sm btn-create-ownership-rule"
            disabled={false}
            onClick={[Function]}
            role="button"
            size="small"
          >
            <Component
              aria-label="Create Ownership Rule"
              className="btn btn-default btn-sm btn-create-ownership-rule css-dkprmi-StyledButton-getColors eqrebog0"
              disabled={false}
              onClick={[Function]}
              role="button"
              size="small"
            >
              <button
                aria-label="Create Ownership Rule"
                className="btn btn-default btn-sm btn-create-ownership-rule css-dkprmi-StyledButton-getColors eqrebog0"
                disabled={false}
                onClick={[Function]}
                role="button"
                size="small"
              >
                <ButtonLabel
                  size="small"
                >
                  <Component
                    className="css-7ui8bl-ButtonLabel eqrebog1"
                    size="small"
                  >
                    <span
                      className="css-7ui8bl-ButtonLabel eqrebog1"
                    >
                      Create Ownership Rule
                    </span>
                  </Component>
                </ButtonLabel>
              </button>
            </Component>
          </StyledButton>
        </Button>
      </div>
    </Access>
  </AccessContainer>
</SuggestedOwners>
`;

exports[`SuggestedOwners render() should show owners when enable 1`] = `
<SuggestedOwners
  event={
    Object {
      "eventID": "12345678901234567890123456789012",
      "groupID": "1",
      "id": "1",
      "message": "ApiException",
    }
  }
>
  <div
    className="m-b-1"
  >
    <h6>
      <span>
        Suggested Assignees
      </span>
      <small
        style={
          Object {
            "background": "#FFFFFF",
          }
        }
      >
        Click to assign
      </small>
    </h6>
    <div
      className="avatar-grid"
    >
      <SuggestedOwnersHovercard
        actor={
          Object {
            "id": "1",
            "name": "Jane Doe",
            "type": "user",
          }
        }
        key="1:undefined:Jane Doe:0"
        rules={Array []}
      >
        <Hovercard
          body={
            <HovercardBody>
              <React.Fragment>
                <div
                  className="divider"
                >
                  <h6>
                    Ownership Rules
                  </h6>
                </div>
                <SuggestionReason>
                  Suggested based on Project Ownership settings
                </SuggestionReason>
                <ul />
              </React.Fragment>
            </HovercardBody>
          }
          containerClassName="avatar-grid-item"
          displayTimeout={100}
          header={
            <React.Fragment>
              <HovercardHeader>
                <HovercardActorAvatar
                  actor={
                    Object {
                      "id": "1",
                      "name": "Jane Doe",
                      "type": "user",
                    }
                  }
                />
                Jane Doe
              </HovercardHeader>
            </React.Fragment>
          }
          key="user:undefined"
        >
          <Container
            className="avatar-grid-item"
            innerRef={
              Object {
                "current": <span
                  class="avatar-grid-item css-s35yzd-Container e38w1je1"
                >
                  <span
                    class="avatar css-3f9bmx-StyledBaseAvatar e1z0ohzl0"
                    style="cursor: pointer;"
                  >
                    <svg
                      class="css-1r4mnb9-Svg e1knxa8x0"
                      viewBox="0 0 120 120"
                    >
                      <rect
                        fill="#f868bc"
                        height="120"
                        rx="15"
                        ry="15"
                        width="120"
                        x="0"
                        y="0"
                      />
                      <text
                        fill="#FFFFFF"
                        font-size="65"
                        style="dominant-baseline: central;"
                        text-anchor="middle"
                        x="50%"
                        y="50%"
                      >
                        JD
                      </text>
                    </svg>
                  </span>
                </span>,
              }
            }
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
          >
            <span
              className="avatar-grid-item css-s35yzd-Container e38w1je1"
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
            >
              <ActorAvatar
                actor={
                  Object {
                    "id": "1",
                    "name": "Jane Doe",
                    "type": "user",
                  }
                }
                hasTooltip={false}
                onClick={[Function]}
                style={
                  Object {
                    "cursor": "pointer",
                  }
                }
              >
                <Avatar
                  hasTooltip={false}
                  onClick={[Function]}
                  style={
                    Object {
                      "cursor": "pointer",
                    }
                  }
                  user={
                    Object {
                      "email": "janedoe@example.com",
                      "id": "1",
                      "name": "Jane Doe",
                    }
                  }
                >
                  <UserAvatar
                    gravatar={false}
                    hasTooltip={false}
                    onClick={[Function]}
                    style={
                      Object {
                        "cursor": "pointer",
                      }
                    }
                    user={
                      Object {
                        "email": "janedoe@example.com",
                        "id": "1",
                        "name": "Jane Doe",
                      }
                    }
                  >
                    <BaseAvatar
                      gravatarId="janedoe@example.com"
                      hasTooltip={false}
                      letterId="janedoe@example.com"
                      onClick={[Function]}
                      round={true}
                      style={
                        Object {
                          "cursor": "pointer",
                        }
                      }
                      title="Jane Doe"
                      tooltip="Jane Doe (janedoe@example.com)"
                      type="letter_avatar"
                      uploadPath="avatar"
                    >
                      <Tooltip
                        disabled={true}
                        title="Jane Doe (janedoe@example.com)"
                      >
                        <StyledBaseAvatar
                          className="avatar"
                          loaded={true}
                          round={true}
                          style={
                            Object {
                              "cursor": "pointer",
                            }
                          }
                        >
                          <span
                            className="avatar css-3f9bmx-StyledBaseAvatar e1z0ohzl0"
                            style={
                              Object {
                                "cursor": "pointer",
                              }
                            }
                          >
                            <LetterAvatar
                              displayName="Jane Doe"
                              identifier="janedoe@example.com"
                              round={true}
                            >
                              <Svg
                                round={true}
                                viewBox="0 0 120 120"
                              >
                                <svg
                                  className="css-1r4mnb9-Svg e1knxa8x0"
                                  viewBox="0 0 120 120"
                                >
                                  <rect
                                    fill="#f868bc"
                                    height="120"
                                    rx="15"
                                    ry="15"
                                    width="120"
                                    x="0"
                                    y="0"
                                  />
                                  <text
                                    fill="#FFFFFF"
                                    fontSize="65"
                                    style={
                                      Object {
                                        "dominantBaseline": "central",
                                      }
                                    }
                                    textAnchor="middle"
                                    x="50%"
                                    y="50%"
                                  >
                                    JD
                                  </text>
                                </svg>
                              </Svg>
                            </LetterAvatar>
                          </span>
                        </StyledBaseAvatar>
                      </Tooltip>
                    </BaseAvatar>
                  </UserAvatar>
                </Avatar>
              </ActorAvatar>
            </span>
          </Container>
        </Hovercard>
      </SuggestedOwnersHovercard>
    </div>
  </div>
  <AccessContainer
    access={
      Array [
        "project:write",
      ]
    }
  >
    <Access
      access={
        Array [
          "project:write",
        ]
      }
      configUser={
        Object {
          "email": "foo@example.com",
          "flags": Object {
            "newsletter_consent_prompt": false,
          },
          "hasPasswordAuth": true,
          "id": "1",
          "isAuthenticated": true,
          "name": "Foo Bar",
          "options": Object {
            "timezone": "UTC",
          },
          "permissions": Set {},
          "username": "foo@example.com",
        }
      }
      organization={
        Object {
          "access": Array [
            "org:read",
            "org:write",
            "org:admin",
            "project:read",
            "project:write",
            "project:admin",
            "team:read",
            "team:write",
            "team:admin",
          ],
          "features": Array [
            "code-owners",
          ],
          "id": "3",
          "name": "Organization Name",
          "onboardingTasks": Array [],
          "projects": Array [],
          "scrapeJavaScript": true,
          "slug": "org-slug",
          "status": Object {
            "id": "active",
            "name": "active",
          },
          "teams": Array [],
        }
      }
      renderNoAccessMessage={false}
      requireAll={true}
    >
      <div
        className="m-b-1"
      >
        <h6>
          <GuideAnchor
            target="owners"
            type="text"
          >
            <GuideAnchorContainer
              innerRef={[Function]}
              type="text"
            >
              <div
                className="css-9u5for-GuideAnchorContainer e130o4350"
                type="text"
              >
                <StyledGuideAnchor
                  active={false}
                  className="guide-anchor-ping owners"
                >
                  <div
                    className="guide-anchor-ping owners css-1yndvnf-StyledGuideAnchor e130o4351"
                  >
                    <StyledGuideAnchorRipples>
                      <div
                        className="css-3zj3g7-StyledGuideAnchorRipples e130o4352"
                      />
                    </StyledGuideAnchorRipples>
                  </div>
                </StyledGuideAnchor>
              </div>
            </GuideAnchorContainer>
          </GuideAnchor>
          <span>
            Ownership Rules
          </span>
        </h6>
        <Button
          className="btn btn-default btn-sm btn-create-ownership-rule"
          disabled={false}
          onClick={[Function]}
          size="small"
        >
          <StyledButton
            aria-label="Create Ownership Rule"
            className="btn btn-default btn-sm btn-create-ownership-rule"
            disabled={false}
            onClick={[Function]}
            role="button"
            size="small"
          >
            <Component
              aria-label="Create Ownership Rule"
              className="btn btn-default btn-sm btn-create-ownership-rule css-dkprmi-StyledButton-getColors eqrebog0"
              disabled={false}
              onClick={[Function]}
              role="button"
              size="small"
            >
              <button
                aria-label="Create Ownership Rule"
                className="btn btn-default btn-sm btn-create-ownership-rule css-dkprmi-StyledButton-getColors eqrebog0"
                disabled={false}
                onClick={[Function]}
                role="button"
                size="small"
              >
                <ButtonLabel
                  size="small"
                >
                  <Component
                    className="css-7ui8bl-ButtonLabel eqrebog1"
                    size="small"
                  >
                    <span
                      className="css-7ui8bl-ButtonLabel eqrebog1"
                    >
                      Create Ownership Rule
                    </span>
                  </Component>
                </ButtonLabel>
              </button>
            </Component>
          </StyledButton>
        </Button>
      </div>
    </Access>
  </AccessContainer>
</SuggestedOwners>
`;
